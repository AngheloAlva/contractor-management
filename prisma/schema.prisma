generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

enum USER_ROLE {
  ADMIN
  PARTNER_COMPANY
}

enum AREAS {
  OPERATIONS // Operaciones
  INSTRUCTIONS // Instructivos
  INTEGRITY_AND_MAINTENANCE // Integridad y Mantencion
  ENVIRONMENT // Medio Ambiente
  OPERATIONAL_SAFETY // Seguridad Operacional
  QUALITY_AND_OPERATIONAL_EXCELLENCE // Calidad y Exelencia Operacional
  REGULATORY_COMPLIANCE // Cumplimiento Normativo
  LEGAL // Juridica
  COMMUNITIES // Comunidades (periodistas?)
  PROJECTS // Proyectos
  PURCHASING // Compras
  ADMINISTRATION_AND_FINANCES // Administración y Finanzas
  IT // Informática
  GERENCY // Gerencia
  DOCUMENTARY_LIBRARY // Biblioteca Documental
}


model User {
  id               String    @id
  name             String
  email            String
  emailVerified    Boolean
  image            String?
  phone            String?
  createdAt        DateTime
  updatedAt        DateTime
  role             String?
  accessRole       USER_ROLE @default(PARTNER_COMPANY)
  internalRole     String?
  area             AREAS?
  banned           Boolean?
  banReason        String?
  banExpires       DateTime?
  rut              String
  twoFactorEnabled Boolean?
  documentAreas    AREAS[]   @default([])
  internalArea     String?
  isActive         Boolean   @default(true)

  sessions                        Session[]
  accounts                        Account[]
  files                           File[]
  folders                         Folder[]
  safetyTalks                     UserSafetyTalk[]
  safetyTalkAttempts              SafetyTalkAttempt[]
  safetyTalkApproval              UserSafetyTalk[]          @relation("UserSafetyTalkApproval")
  company                         Company?                  @relation(fields: [companyId], references: [id])
  companiesCreatedBy              Company[]                 @relation("CompanyCreatedBy")
  companyId                       String?
  isSupervisor                    Boolean?
  workOrders                      WorkOrder[]               @relation("WorkOrderResponsible")
  workOrdersAsSupervisor          WorkOrder[]               @relation("WorkOrderSupervisor")
  requestedClosures               WorkOrder[]               @relation("WorkOrderClosureRequester")
  approvedClosures                WorkOrder[]               @relation("WorkOrderClosureApprover")
  assignedEntries                 WorkEntry[]               @relation("AssignedUsers")
  createdEntries                  WorkEntry[]               @relation("WorkEntryCreator")
  signedEntries                   WorkEntry[]               @relation("WorkEntrySigner")
  workEntries                     WorkEntry[]               @relation("WorkEntryApproval")
  notifications                   Notification[]
  workPermitsAsParticipant        WorkPermit[]              @relation("WorkPermitParticipants")
  workPermitsAsPreventionOfficer  WorkPermit[]              @relation("PreventionOfficer")
  workPermits                     WorkPermit[]              @relation("WorkPermitUser")
  workPermitApproval              WorkPermit[]              @relation("WorkPermitApproval")
  workPermitClosing               WorkPermit[]              @relation("WorkPermitClosing")
  attachmentsHistory              AttachmentHistory[]
  equipmentHistory                EquipmentHistory[]
  fileHistory                     FileHistory[]
  twofactors                      TwoFactor[]
  FileComment                     FileComment[]
  MaintenancePlan                 MaintenancePlan[]
  MaintenancePlanTask             MaintenancePlanTask[]
  approvedMilestones              Milestone[]               @relation("MilestoneApprover")
  requestedMilestones             Milestone[]               @relation("MilestoneRequestedBy")
  safetyAndHealthFolders          SafetyAndHealthFolder[]
  safetyAndHealthDocuments        SafetyAndHealthDocument[] @relation("SafetyAndHealthDocumentUploadedBy")
  safetyAndHealthDocumentReviewer SafetyAndHealthDocument[] @relation("SafetyAndHealthDocumentReviewer")
  workerFolder                    WorkerFolder[]            @relation("WorkerFolderWorker")
  workerFolderReviewer            WorkerFolder[]            @relation("WorkerFolderReviewer")
  workerDocument                  WorkerDocument[]          @relation("WorkerDocumentUploadedBy")
  workerDocumentReviewer          WorkerDocument[]          @relation("WorkerDocumentReviewer")
  vehicleFolder                   VehicleFolder[]
  vehicleDocument                 VehicleDocument[]         @relation("VehicleDocumentUploadedBy")
  vehicleDocumentReviewer         VehicleDocument[]         @relation("VehicleDocumentReviewer")
  environmentFolder               EnvironmentFolder[]
  environmentDocument             EnvironmentDocument[]     @relation("EnvironmentDocumentUploadedBy")
  environmentDocumentReviewer     EnvironmentDocument[]     @relation("EnvironmentDocumentReviewer")
  basicDocument                   BasicDocument[]           @relation("BasicDocumentUploadedBy")
  basicDocumentReviewer           BasicDocument[]           @relation("BasicDocumentReviewer")
  basicFolder                     BasicFolder[]             @relation("BasicFolderWorker")
  techSpecsFolder                 TechSpecsFolder[]
  techSpecsDocument               TechSpecsDocument[]       @relation("TechSpecsDocumentUploadedBy")
  techSpecsDocumentReviewer       TechSpecsDocument[]       @relation("TechSpecsDocumentReviewer")
  workRequestApproves             WorkRequest[]             @relation("WorkRequestApprovalBy")
  workRequestComments             WorkRequestComment[]
  workPermitAttachments           WorkPermitAttachment[]
  activityLogs                    ActivityLog[]
  WorkRequest                     WorkRequest[]
  basicFolderReviewer             BasicFolder[]             @relation("BasicFolderReviewer")
  equipment                       Equipment[]               @relation("EquipmentCreatedBy")

  @@unique([email])
  @@unique([rut])
  @@index([email], name: "email_idx")
  @@index([companyId], name: "company_id_idx")
  @@index([accessRole, isActive], name: "access_role_is_active_idx")
  @@map("user")
}

model Notification {
  id         String   @id @default(cuid())
  type       String
  title      String
  message    String
  link       String?
  targetRole String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId], name: "notification_user_id_idx")
  @@index([isRead], name: "notification_is_read_idx")
  @@index([targetRole], name: "notification_target_role_idx")
  @@map("notification")
}

model RutCounter {
  id    String @id @default("rut_counter")
  value Int    @default(1)

  @@map("rut_counter")
}

model TwoFactor {
  id          String
  secret      String?
  backupCodes String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([id])
  @@unique([userId])
  @@map("twoFactor")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Company {
  id       String  @id @default(cuid())
  name     String
  rut      String  @unique
  image    String?
  isActive Boolean @default(true)

  createdBy      User?           @relation("CompanyCreatedBy", fields: [createdById], references: [id])
  createdById    String?
  users          User[]
  workOrders     WorkOrder[]
  workPermits    WorkPermit[]
  vehicles       Vehicle[]
  StartupFolders StartupFolder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id])
  @@index([rut], name: "rut_idx")
  @@index([name], name: "name_idx")
  @@index([isActive], name: "is_active_idx")
  @@map("company")
}

enum VEHICLE_TYPE {
  CAR
  TRUCK
  MOTORCYCLE
  BUS
  TRACTOR
  TRAILER
  OTHER
  VAN
}

model Vehicle {
  id String @id @default(cuid())

  plate    String?
  model    String?
  year     Int?
  brand    String?
  type     VEHICLE_TYPE?
  color    String?
  isMain   Boolean       @default(false)
  isActive Boolean       @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company         Company         @relation(fields: [companyId], references: [id])
  companyId       String
  workPermits     WorkPermit[]
  vehiclesFolders VehicleFolder[]

  @@map("vehicle")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum WORK_ORDER_STATUS {
  PLANNED
  PENDING
  COMPLETED
  CANCELLED
  IN_PROGRESS
  CLOSURE_REQUESTED
}

enum WORK_ORDER_TYPE {
  CORRECTIVE
  PREVENTIVE
  PREDICTIVE
  PROACTIVE
}

enum WORK_ORDER_CAPEX {
  CONFIDABILITY // Confiabilidad
  MITIGATE_RISK // Mitiga riesgo
  COMPLIANCE // Cumplimiento normativo
}

enum WORK_ORDER_PRIORITY {
  HIGH
  MEDIUM
  LOW
}

model WorkOrder {
  id       String @id @default(cuid())
  otNumber String

  type                  WORK_ORDER_TYPE
  status                WORK_ORDER_STATUS          @default(PLANNED)
  solicitationDate      DateTime
  solicitationTime      String
  workRequest           String
  workDescription       String?
  priority              WORK_ORDER_PRIORITY
  capex                 WORK_ORDER_CAPEX?
  equipment             Equipment[]
  programDate           DateTime
  estimatedHours        Float
  estimatedDays         Float
  estimatedEndDate      DateTime?
  isWorkBookInit        Boolean                    @default(false)
  isInternalResponsible Boolean                    @default(false)
  isMilestonesApproved  Boolean                    @default(true)

  // Work book data
  workName           String?
  workLocation       String?
  workStartDate      DateTime?
  workProgressStatus Float?      @default(0)
  workEntries        WorkEntry[]

  company               Company?             @relation(fields: [companyId], references: [id])
  companyId             String?
  supervisor            User                 @relation("WorkOrderSupervisor", fields: [supervisorId], references: [id])
  supervisorId          String
  responsible           User                 @relation("WorkOrderResponsible", fields: [responsibleId], references: [id])
  responsibleId         String
  manualDocuments       Attachment[]         @relation("WorkOrderManualDocuments")
  initReport            Attachment?          @relation("WorkOrderInitReport", fields: [initReportId], references: [id])
  initReportId          String?              @unique
  endReport             Attachment?          @relation("WorkOrderEndReport", fields: [endReportId], references: [id])
  endReportId           String?              @unique
  workPermits           WorkPermit[]
  closureRequestedBy    User?                @relation("WorkOrderClosureRequester", fields: [closureRequestedById], references: [id])
  closureRequestedById  String?
  closureRequestedAt    DateTime?
  closureApprovedBy     User?                @relation("WorkOrderClosureApprover", fields: [closureApprovedById], references: [id])
  closureApprovedById   String?
  closureApprovedAt     DateTime?
  closureRejectedReason String?
  equipmentHistory      EquipmentHistory[]
  MaintenancePlanTask   MaintenancePlanTask? @relation(fields: [maintenancePlanTaskId], references: [id])
  maintenancePlanTaskId String?
  milestones            Milestone[]
  startupFolder         StartupFolder?
  workRequestId         String?
  workRequested         WorkRequest?         @relation(fields: [workRequestId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id])
  @@unique([otNumber])
  @@index([status], name: "status_idx")
  @@index([otNumber], name: "ot_number_idx")
  @@index([companyId, status], name: "company_status_idx")
  @@map("work_order")
}

enum MILESTONE_STATUS {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REQUESTED_CLOSURE
}

model Milestone {
  id             String           @id @default(cuid())
  name           String
  description    String?
  status         MILESTONE_STATUS @default(PENDING)
  order          Int              @default(0)
  isCompleted    Boolean          @default(false)
  weight         Float
  startDate      DateTime?
  endDate        DateTime?
  approvedAt     DateTime?
  closureComment String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  requestedBy   User?       @relation("MilestoneRequestedBy", fields: [requestedById], references: [id])
  requestedById String?
  approvedBy    User?       @relation("MilestoneApprover", fields: [approvedById], references: [id])
  approvedById  String?
  workOrder     WorkOrder   @relation(fields: [workOrderId], references: [id])
  workOrderId   String
  activities    WorkEntry[]

  @@unique([id])
  @@index([workOrderId, order])
  @@map("milestone")
}

enum CRITICALITY {
  CRITICAL
  SEMICRITICAL
  UNCITICAL
}

model Equipment {
  id            String       @id @default(cuid())
  barcode       String
  name          String
  description   String?
  location      String
  isOperational Boolean      @default(true)
  type          String?
  tag           String
  criticality   CRITICALITY?
  imageUrl      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent              Equipment?            @relation("EquipmentHierarchy", fields: [parentId], references: [id])
  parentId            String?
  children            Equipment[]           @relation("EquipmentHierarchy")
  workOrders          WorkOrder[]
  history             EquipmentHistory[]
  MaintenancePlan     MaintenancePlan[]
  MaintenancePlanTask MaintenancePlanTask[]
  attachments         Attachment[]
  createdBy           User?                 @relation("EquipmentCreatedBy", fields: [createdById], references: [id])
  createdById         String?
  workRequests        WorkRequest[]

  @@unique([id])
  @@unique([tag])
  @@unique([barcode])
  @@map("equipment")
}

enum WORK_APPLICATION_STATUS {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  EXPIRED
}

enum ENTRY_TYPE {
  DAILY_ACTIVITY
  ADDITIONAL_ACTIVITY
  PREVENTION_AREA
  OTC_INSPECTION
  COMMENT
  USER_NOTE
}

enum NOTE_STATUS {
  PENDING
  ACKNOWLEDGED
  RESOLVED
}

model WorkEntry {
  id                  String             @id @default(cuid())
  entryType           ENTRY_TYPE
  isFavorite          Boolean            @default(false)
  hasAttachments      Boolean            @default(false)
  executionDate       DateTime           @default(now())
  activityName        String?
  activityStartTime   String?
  activityEndTime     String?
  comments            String?
  supervisionComments String?
  safetyObservations  String?
  nonConformities     String?
  inspectorName       String?
  recommendations     String?
  others              String?
  noteStatus          NOTE_STATUS?       @default(PENDING)
  notificationSent    Boolean            @default(false)
  acknowledgedAt      DateTime?
  resolvedAt          DateTime?
  approvalDate        DateTime?
  approvalBy          User?              @relation("WorkEntryApproval", fields: [approvalById], references: [id])
  approvalById        String?
  createdAt           DateTime           @default(now())
  createdBy           User               @relation("WorkEntryCreator", fields: [createdById], references: [id])
  createdById         String
  signedAt            DateTime?
  signedBy            User?              @relation("WorkEntrySigner", fields: [signedById], references: [id])
  signedById          String?
  workOrder           WorkOrder          @relation(fields: [workOrderId], references: [id])
  workOrderId         String
  milestone           Milestone?         @relation(fields: [milestoneId], references: [id])
  milestoneId         String?
  assignedUsers       User[]             @relation(name: "AssignedUsers")
  referencedEntry     WorkEntry?         @relation("EntryReferences", fields: [referencedEntryId], references: [id])
  referencedEntryId   String?
  referencedBy        WorkEntry[]        @relation("EntryReferences")
  equipmentHistory    EquipmentHistory[]
  attachments         Attachment[]

  @@unique([id])
  @@index([milestoneId])
  @@index([workOrderId, createdAt])
  @@index([workOrderId, entryType])
  @@map("work_book_entry")
}

model Attachment {
  id   String @id @default(cuid())
  name String
  url  String
  type String
  size Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workEntry             WorkEntry?           @relation(fields: [workEntryId], references: [id])
  workEntryId           String?
  workTrackerId         String?
  manualDocuments       WorkOrder[]          @relation("WorkOrderManualDocuments")
  initReport            WorkOrder?           @relation("WorkOrderInitReport")
  initReportId          String?              @unique
  endReport             WorkOrder?           @relation("WorkOrderEndReport")
  endReportId           String?              @unique
  history               AttachmentHistory[]
  MaintenancePlanTask   MaintenancePlanTask? @relation(fields: [maintenancePlanTaskId], references: [id])
  maintenancePlanTaskId String?
  equipment             Equipment?           @relation(fields: [equipmentId], references: [id])
  equipmentId           String?
  workRequest           WorkRequest?         @relation(fields: [workRequestId], references: [id])
  workRequestId         String?

  @@map("attachment")
}

enum WORK_PERMIT_STATUS {
  ACTIVE
  REJECTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  EXPIRED
  REVIEW_PENDING
}

model WorkPermit {
  id                             String                 @id @default(cuid())
  status                         WORK_PERMIT_STATUS     @default(REVIEW_PENDING)
  aplicantPt                     String
  mutuality                      String
  otherMutuality                 String?
  exactPlace                     String
  workWillBe                     String
  workWillBeOther                String?
  tools                          String[]
  otherTools                     String?
  preChecks                      String[]
  otherPreChecks                 String?
  activityDetails                String[]
  riskIdentification             String[]
  otherRisk                      String?
  preventiveControlMeasures      String[]
  otherPreventiveControlMeasures String?
  generateWaste                  Boolean
  wasteType                      String?
  wasteDisposalLocation          String?
  whoDeliversWorkAreaOp          String?
  workerExecutor                 String?
  workCompleted                  Boolean?
  cleanAndTidyWorkArea           Boolean?
  additionalObservations         String?
  observations                   String?
  acceptTerms                    Boolean                @default(false)
  startDate                      DateTime
  endDate                        DateTime
  initialAreaMeasurement         Float?
  createdAt                      DateTime               @default(now())
  updatedAt                      DateTime               @updatedAt
  approvalDate                   DateTime?
  approvalBy                     User?                  @relation("WorkPermitApproval", fields: [approvalById], references: [id])
  approvalById                   String?
  closingDate                    DateTime?
  closingBy                      User?                  @relation("WorkPermitClosing", fields: [closingById], references: [id])
  closingById                    String?
  preventionOfficerUser          User?                  @relation("PreventionOfficer", fields: [preventionOfficerId], references: [id])
  preventionOfficerId            String?
  otNumber                       WorkOrder              @relation(fields: [otNumberId], references: [id])
  otNumberId                     String
  user                           User                   @relation("WorkPermitUser", fields: [userId], references: [id])
  userId                         String
  participants                   User[]                 @relation("WorkPermitParticipants")
  company                        Company                @relation(fields: [companyId], references: [id])
  companyId                      String
  vehicles                       Vehicle[]
  operatorWorker                 String?
  attachments                    WorkPermitAttachment[]

  @@map("work_permit")
}

model WorkPermitAttachment {
  id   String @id @default(cuid())
  name String
  url  String
  type String
  size Int?

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  uploadedAt DateTime @default(now())

  uploadedBy   User       @relation(fields: [uploadedById], references: [id])
  uploadedById String
  workPermitId String
  workPermit   WorkPermit @relation(fields: [workPermitId], references: [id])

  @@map("work_permit_attachment")
}

model Folder {
  id   String @id @default(cuid())
  slug String

  name        String
  description String?
  root        Boolean @default(false)
  area        AREAS
  type        String  @default("default")
  isExternal  Boolean @default(false)
  isActive    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent     Folder?  @relation("FolderToFolder", fields: [parentId], references: [id])
  parentId   String?
  subFolders Folder[] @relation("FolderToFolder")
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  files      File[]

  @@unique([slug, parentId, userId])
  @@index([area, isActive], name: "folder_area_idx")
  @@index([parentId, isActive], name: "folder_parent_idx")
  @@map("folder")
}

model File {
  id String @id @default(cuid())

  code             String?
  name             String
  description      String?
  area             AREAS?
  type             String
  size             Int
  url              String
  registrationDate DateTime
  expirationDate   DateTime?
  revisionCount    Int       @default(0)
  isExternal       Boolean   @default(false)
  isActive         Boolean   @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  history  FileHistory[]
  folder   Folder?       @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId String?
  user     User          @relation(fields: [userId], references: [id])
  userId   String
  comments FileComment[]

  @@index([folderId, isActive], name: "file_folder_idx")
  @@index([area, isActive], name: "file_area_idx")
  @@map("file")
}

model FileComment {
  id String @id @default(cuid())

  title   String?
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String
  file   File   @relation(fields: [fileId], references: [id])
  fileId String

  @@map("file_comment")
}

model Counter {
  id    String @id @default("ot_counter")
  value Int    @default(1)
}

model WorkRequestCounter {
  id    String @id @default("work_request_counter")
  value Int    @default(1)

  @@map("work_request_counter")
}

enum SAFETY_TALK_CATEGORY {
  ENVIRONMENT
  IRL
}

enum SAFETY_TALK_STATUS {
  PENDING
  IN_PROGRESS
  PASSED
  FAILED
  BLOCKED
  MANUALLY_APPROVED
}

model SafetyTalkAttempt {
  id            String               @id @default(cuid())
  category      SAFETY_TALK_CATEGORY
  score         Float
  passed        Boolean
  answers       Json
  attemptNumber Int
  completedAt   DateTime
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt

  userId           String
  user             User           @relation(fields: [userId], references: [id])
  userSafetyTalkId String
  userSafetyTalk   UserSafetyTalk @relation(fields: [userSafetyTalkId], references: [id])

  @@index([userId])
  @@index([userSafetyTalkId])
  @@map("safety_talk_attempt")
}

model UserSafetyTalk {
  id                  String               @id @default(cuid())
  category            SAFETY_TALK_CATEGORY
  status              SAFETY_TALK_STATUS   @default(PENDING)
  currentAttempts     Int                  @default(0)
  startedAt           DateTime?
  lastAttemptAt       DateTime?
  nextAttemptAt       DateTime?
  score               Float?
  minRequiredScore    Float                @default(70.0)
  completedAt         DateTime?
  expiresAt           DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  manuallyApproved    Boolean              @default(false)
  inPersonSessionDate DateTime?
  approvalById        String?
  approvalBy          User?                @relation("UserSafetyTalkApproval", fields: [approvalById], references: [id])

  userId   String
  user     User                @relation(fields: [userId], references: [id])
  attempts SafetyTalkAttempt[]

  @@index([userId])
  @@index([category])
  @@index([status])
  @@map("user_safety_talk")
}

model AttachmentHistory {
  id           String     @id @default(cuid())
  attachment   Attachment @relation(fields: [attachmentId], references: [id])
  attachmentId String
  previousUrl  String
  previousName String
  modifiedBy   User       @relation(fields: [userId], references: [id])
  userId       String
  modifiedAt   DateTime   @default(now())
  reason       String?

  @@map("attachment_history")
}

model FileHistory {
  id           String   @id @default(cuid())
  file         File     @relation(fields: [fileId], references: [id])
  fileId       String
  previousUrl  String
  previousName String
  modifiedBy   User     @relation(fields: [userId], references: [id])
  userId       String
  modifiedAt   DateTime @default(now())
  reason       String?

  @@map("file_history")
}

model EquipmentHistory {
  id          String     @id @default(cuid())
  equipment   Equipment  @relation(fields: [equipmentId], references: [id])
  equipmentId String
  changeType  String
  description String
  modifiedBy  User       @relation(fields: [userId], references: [id])
  userId      String
  modifiedAt  DateTime   @default(now())
  status      String
  createdAt   DateTime   @default(now())
  workOrder   WorkOrder? @relation(fields: [workOrderId], references: [id])
  workOrderId String?
  workEntry   WorkEntry? @relation(fields: [workEntryId], references: [id])
  workEntryId String?

  @@unique([id])
  @@map("equipment_history")
}

enum PLAN_FREQUENCY {
  DAILY
  WEEKLY
  MONTHLY
  BIMONTHLY
  QUARTERLY
  FOURMONTHLY
  BIANNUAL
  YEARLY
}

model MaintenancePlan {
  id          String                     @id @default(cuid())
  slug        String                     @unique
  name        String
  description String
  createdAt   DateTime                   @default(now())
  updatedAt   DateTime                   @updatedAt

  equipment   Equipment             @relation(fields: [equipmentId], references: [id])
  equipmentId String
  createdBy   User                  @relation(fields: [createdById], references: [id])
  createdById String
  task        MaintenancePlanTask[]

  @@map("maintenance_plan")
}

model MaintenancePlanTask {
  id          String                     @id @default(cuid())
  slug        String                     @unique
  name        String
  description String?
  frequency   PLAN_FREQUENCY
  nextDate    DateTime
  createdAt   DateTime                   @default(now())
  updatedAt   DateTime                   @updatedAt

  equipment         Equipment       @relation(fields: [equipmentId], references: [id])
  equipmentId       String
  attachments       Attachment[]
  maintenancePlan   MaintenancePlan @relation(fields: [maintenancePlanId], references: [id])
  maintenancePlanId String
  createdBy         User            @relation(fields: [createdById], references: [id])
  createdById       String
  workOrders        WorkOrder[]

  @@map("maintenance_plan_task")
}

enum ReviewStatus {
  DRAFT // Edicion
  SUBMITTED // Enviado
  APPROVED // Aprobado
  REJECTED // Rechazado
  EXPIRED // Expirado
}

enum SafetyAndHealthDocumentType {
  // Información Básica
  COMPANY_INFO // Ficha empresa
  STAFF_LIST // Nómina de personal
  GANTT_CHART // Carta Gantt
  MUTUAL // Certificado de adhesión a mutualidad
  INTERNAL_REGULATION // Reglamento interno
  ACCIDENT_RATE // Certificado de siniestralidad
  // Procedimientos y Otros
  RISK_MATRIX // Matriz de Identificación de peligros y evaluación de Riesgos
  PREVENTION_PLAN // Plan de Prevención de riesgos
  WORK_PROCEDURE // Procedimiento de trabajos
  EMERGENCY_PROCEDURE // Procedimientos de Emergencia
  TOOLS_MAINTENANCE // Programa de Mantención de Herramientas y Equipos
  PPE_CERTIFICATION // Certificación de elementos de Protección Personal
  HARASSMENT_PROCEDURE // Procedimiento de Acoso Laboral, Sexual y Violencia
  ORGANIZATION_CHART // Organigrama
  SAFE_WORK // Trabajo seguro
  RISK_ANALYSIS // Análisis de riesgos
  WORK_PERMIT // Permiso de trabajo
}

enum WorkerDocumentType {
  CONTRACT // Contrato de Trabajo
  INTERNAL_REGULATION_RECEIPT // Entrega de Reglamento Interno
  RISK_INFORMATION // Inducción de Riesgos Laborales (IRL)
  ID_CARD // Cédula de identidad
  DRIVING_LICENSE // Licencias de conducir
  HEALTH_EXAM // Examen médico vigente
  PSYCHOTECHNICAL_EXAM // Examen Psico sensotécnico
  RISK_MATRIX_TRAINING // Capacitación de la matriz de identificación de peligros
  WORK_PROCEDURE_TRAINING // Capacitación del procedimiento de trabajo
  EMERGENCY_PROCEDURE_TRAINING // Capacitación del Procedimiento de Emergencia
  DEFENSIVE_DRIVING_TRAINING // Capacitación curso manejo defensivo
  MOUNTAIN_DEFENSIVE_DRIVING // Curso de manejo defensivo en alta montaña
  TOOLS_MAINTENANCE_TRAINING // Capacitación del procedimiento de Mantención de Herramientas
  HARASSMENT_TRAINING // Capacitación de la Ley Karin
  PPE_RECEIPT // Entrega de Elementos de Protección personal
  PREVENTION_EXPERT // Experto en Prevención de riesgos
  HIGH_RISK_TRAINING // Cursos para trabajos de alto riesgo
  ENVIRONMENTAL_TRAINING // Capacitaciones ambientales
  ALCOHOL_AND_DRUGS_EXAM // Examen de alcohol y drogas
}

enum VehicleDocumentType {
  EQUIPMENT_FILE // Ficha de equipos
  VEHICLE_REGISTRATION // Inscripción del Vehículo Motorizado (Padrón)
  CIRCULATION_PERMIT // Permiso de circulación
  TECHNICAL_REVIEW // Revisión técnica
  INSURANCE // Seguro Obligatorio
  CHECKLIST // Lista de chequeo previa al ingreso
  TRANSPORTATION_TO_OTC // Vehículo de transporte de trabajadores
  HAZARDOUS_WASTE_TRANSPORT // Resolución sanitaria para transporte de residuos peligrosos
  NON_HAZARDOUS_WASTE_TRANSPORT // Resolución sanitaria para transporte de residuos No peligrosos
  LIQUID_WASTE_TRANSPORT // Resolución sanitaria para transporte de residuos domésticos líquidos
}


enum EnvironmentDocType {
  WORK_PROCEDURE // Procedimiento de trabajo con sección ambiental
  ENVIRONMENTAL_ASPECTS_AND_IMPACTS_MATRIX // Matriz de aspectos ambientales y impactos
  SAFETY_DATA_SHEET_FOR_CHEMICALS // Hoja de datos de seguridad de sustancias químicas
  WORKER_TRAINING_RECORD // Planilla de capacitación de los trabajadores
  HEALTH_RESOLUTION_FOR_WORKERS_DRINKING_WATER // Resolución de salud para el agua potable
  HEALTH_RESOLUTION_FOR_THE_CHEMICAL_TOILET // Resolución de salud para el baño químico
  RESOLUTION_FOR_THE_SITE_WHERE_DEBRIS_WILL_BE_DISPOSED // Resolución para el sitio donde se dispondrá el escombros
  RESOLUTION_FOR_THE_DEBRIS_TRANSPORTER // Resolución para el transportador de escombros
  DEBRIS_TRANSFER_ROUTE // Ruta de traslado de escombros y/o tierra de excavación masiva
  HEALTH_RESOLUTION_FROM_THE_PEST_CONTROL_COMPANY // Resolución de salud de la empresa de control de plagas
  ENVIRONMENTAL_MANAGEMENT_PLAN // Plan de Gestión ambiental
}

enum BasicDocumentType {
  CONTRACT // Contrato de trabajo o de prestación de servicios.
  INSURANCE // Certificado de cobertura del seguro contra accidentes laborales.
  PPE_RECEIPT // Registro firmado de entrega de elementos de protección personal
  SAFETY_AND_HEALTH_INFO // Inducción sobre Información de riesgos laborales (DS44), la cual debe incluir Los riesgos a los que se podría estar expuesto en IngSimpley las respectivas medidas de control.
}

enum TechSpecsDocumentType {
  GANTT_CHART // Carta Gantt del trabajo
  TECHNICAL_WORK_PROCEDURE // Procedimiento de trabajo técnico
}

enum DocumentCategory {
  VEHICLES
  PERSONNEL
  ENVIRONMENTAL
  ENVIRONMENT
  SAFETY_AND_HEALTH
  BASIC
  TECHNICAL_SPECS
}

enum StartupFolderType {
  BASIC
  FULL
}

enum StartupFolderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model StartupFolder {
  id                String              @id @default(uuid())
  name              String              @default("Carpeta de arranque")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  type              StartupFolderType   @default(FULL)
  status            StartupFolderStatus @default(PENDING)
  moreMonthDuration Boolean             @default(false)

  workersFolders         WorkerFolder[]
  vehiclesFolders        VehicleFolder[]
  safetyAndHealthFolders SafetyAndHealthFolder[]
  company                Company                 @relation(fields: [companyId], references: [id])
  companyId              String
  workOrder              WorkOrder?              @relation(fields: [workOrderId], references: [id])
  workOrderId            String?                 @unique
  environmentFolders     EnvironmentFolder[]
  basicFolders           BasicFolder[]
  techSpecsFolders       TechSpecsFolder[]

  @@index([companyId, status], name: "startup_folder_company_status_idx")
  @@map("startup_folder")
}

model TechSpecsFolder {
  id                           String       @id @default(cuid())
  status                       ReviewStatus @default(DRAFT)
  additionalNotificationEmails String[]
  submittedAt                  DateTime?
  createdAt                    DateTime     @default(now())
  updatedAt                    DateTime     @updatedAt

  reviewerId      String?
  reviewer        User?               @relation(fields: [reviewerId], references: [id])
  startupFolderId String
  startupFolder   StartupFolder       @relation(fields: [startupFolderId], references: [id])
  documents       TechSpecsDocument[]

  @@unique([startupFolderId])
  @@map("tech_specs_folder")
}

model TechSpecsDocument {
  id             String                @id @default(uuid())
  type           TechSpecsDocumentType
  name           String
  url            String
  uploadedAt     DateTime              @default(now())
  category       DocumentCategory
  status         ReviewStatus          @default(DRAFT)
  reviewNotes    String?
  reviewedAt     DateTime?
  submittedAt    DateTime?
  expirationDate DateTime?
  reviewerId     String?
  reviewer       User?                 @relation("TechSpecsDocumentReviewer", fields: [reviewerId], references: [id])
  uploadedById   String?
  uploadedBy     User?                 @relation("TechSpecsDocumentUploadedBy", fields: [uploadedById], references: [id])
  folderId       String
  folder         TechSpecsFolder       @relation(fields: [folderId], references: [id])

  @@map("tech_specs_document")
}

model BasicFolder {
  id                           String       @id @default(uuid())
  status                       ReviewStatus @default(DRAFT)
  additionalNotificationEmails String[]
  submittedAt                  DateTime?
  createdAt                    DateTime     @default(now())
  updatedAt                    DateTime     @updatedAt

  reviewerId      String?
  reviewer        User?           @relation("BasicFolderReviewer", fields: [reviewerId], references: [id])
  workerId        String
  worker          User            @relation("BasicFolderWorker", fields: [workerId], references: [id])
  startupFolderId String
  startupFolder   StartupFolder   @relation(fields: [startupFolderId], references: [id])
  documents       BasicDocument[]

  @@unique([workerId, startupFolderId])
  @@map("basic_folder")
}

model BasicDocument {
  id             String            @id @default(uuid())
  type           BasicDocumentType
  name           String
  url            String
  uploadedAt     DateTime          @default(now())
  category       DocumentCategory
  status         ReviewStatus      @default(DRAFT)
  reviewNotes    String?
  reviewedAt     DateTime?
  submittedAt    DateTime?
  expirationDate DateTime?
  reviewerId     String?
  reviewer       User?             @relation("BasicDocumentReviewer", fields: [reviewerId], references: [id])
  uploadedById   String?
  uploadedBy     User?             @relation("BasicDocumentUploadedBy", fields: [uploadedById], references: [id])
  folderId       String
  folder         BasicFolder       @relation(fields: [folderId], references: [id])

  @@map("basic_document")
}

model SafetyAndHealthFolder {
  id                           String       @id @default(cuid())
  status                       ReviewStatus @default(DRAFT)
  additionalNotificationEmails String[]
  submittedAt                  DateTime?
  createdAt                    DateTime     @default(now())
  updatedAt                    DateTime     @updatedAt

  reviewerId      String?
  reviewer        User?                     @relation(fields: [reviewerId], references: [id])
  startupFolderId String
  startupFolder   StartupFolder             @relation(fields: [startupFolderId], references: [id])
  documents       SafetyAndHealthDocument[]

  @@unique([startupFolderId])
  @@map("safety_and_health_folder")
}

model SafetyAndHealthDocument {
  id             String                      @id @default(uuid())
  type           SafetyAndHealthDocumentType
  name           String
  url            String
  uploadedAt     DateTime                    @default(now())
  category       DocumentCategory
  status         ReviewStatus                @default(DRAFT)
  reviewNotes    String?
  reviewedAt     DateTime?
  submittedAt    DateTime?
  expirationDate DateTime?
  reviewerId     String?
  reviewer       User?                       @relation("SafetyAndHealthDocumentReviewer", fields: [reviewerId], references: [id])
  uploadedById   String?
  uploadedBy     User?                       @relation("SafetyAndHealthDocumentUploadedBy", fields: [uploadedById], references: [id])
  folderId       String
  folder         SafetyAndHealthFolder       @relation(fields: [folderId], references: [id])

  @@map("safety_and_health_document")
}

model WorkerFolder {
  id                           String       @id @default(cuid())
  status                       ReviewStatus @default(DRAFT)
  additionalNotificationEmails String[]
  submittedAt                  DateTime?
  createdAt                    DateTime     @default(now())
  updatedAt                    DateTime     @updatedAt
  isDriver                     Boolean      @default(true)

  reviewerId      String?
  reviewer        User?            @relation("WorkerFolderReviewer", fields: [reviewerId], references: [id])
  workerId        String
  worker          User             @relation("WorkerFolderWorker", fields: [workerId], references: [id])
  startupFolderId String
  startupFolder   StartupFolder    @relation(fields: [startupFolderId], references: [id])
  documents       WorkerDocument[]

  @@unique([workerId, startupFolderId])
  @@map("worker_folders")
}

model WorkerDocument {
  id             String             @id @default(uuid())
  type           WorkerDocumentType
  name           String
  url            String
  uploadedAt     DateTime           @default(now())
  category       DocumentCategory
  status         ReviewStatus       @default(DRAFT)
  reviewNotes    String?
  reviewedAt     DateTime?
  submittedAt    DateTime?
  expirationDate DateTime?
  reviewerId     String?
  reviewer       User?              @relation("WorkerDocumentReviewer", fields: [reviewerId], references: [id])
  uploadedById   String?
  uploadedBy     User?              @relation("WorkerDocumentUploadedBy", fields: [uploadedById], references: [id])
  folder         WorkerFolder       @relation(fields: [folderId], references: [id])
  folderId       String

  @@map("worker_document")
}

model VehicleFolder {
  id                           String       @id @default(cuid())
  status                       ReviewStatus @default(DRAFT)
  additionalNotificationEmails String[]
  submittedAt                  DateTime?
  createdAt                    DateTime     @default(now())
  updatedAt                    DateTime     @updatedAt

  vehicleId       String
  startupFolderId String
  reviewerId      String?
  reviewer        User?             @relation(fields: [reviewerId], references: [id])
  vehicle         Vehicle           @relation(fields: [vehicleId], references: [id])
  startupFolder   StartupFolder     @relation(fields: [startupFolderId], references: [id])
  documents       VehicleDocument[]

  @@unique([vehicleId, startupFolderId])
  @@map("vehicle_folders")
}

model VehicleDocument {
  id             String              @id @default(uuid())
  type           VehicleDocumentType
  name           String
  url            String
  uploadedAt     DateTime            @default(now())
  category       DocumentCategory
  status         ReviewStatus        @default(DRAFT)
  reviewNotes    String?
  reviewedAt     DateTime?
  submittedAt    DateTime?
  expirationDate DateTime?
  reviewerId     String?
  reviewer       User?               @relation("VehicleDocumentReviewer", fields: [reviewerId], references: [id])
  uploadedById   String?
  uploadedBy     User?               @relation("VehicleDocumentUploadedBy", fields: [uploadedById], references: [id])
  folderId       String
  folder         VehicleFolder       @relation(fields: [folderId], references: [id])

  @@map("vehicle_document")
}

model EnvironmentFolder {
  id                           String       @id @default(cuid())
  status                       ReviewStatus @default(DRAFT)
  additionalNotificationEmails String[]
  submittedAt                  DateTime?
  createdAt                    DateTime     @default(now())
  updatedAt                    DateTime     @updatedAt

  reviewerId      String?
  reviewer        User?                 @relation(fields: [reviewerId], references: [id])
  startupFolderId String
  startupFolder   StartupFolder         @relation(fields: [startupFolderId], references: [id])
  documents       EnvironmentDocument[]

  @@unique([startupFolderId])
  @@map("environment_folder")
}

model EnvironmentDocument {
  id             String             @id @default(uuid())
  type           EnvironmentDocType
  name           String
  url            String
  uploadedAt     DateTime           @default(now())
  category       DocumentCategory
  status         ReviewStatus       @default(DRAFT)
  reviewNotes    String?
  reviewedAt     DateTime?
  submittedAt    DateTime?
  expirationDate DateTime?
  reviewerId     String?
  reviewer       User?              @relation("EnvironmentDocumentReviewer", fields: [reviewerId], references: [id])
  uploadedById   String?
  uploadedBy     User?              @relation("EnvironmentDocumentUploadedBy", fields: [uploadedById], references: [id])
  folderId       String
  folder         EnvironmentFolder  @relation(fields: [folderId], references: [id])

  @@map("environment_document")
}

enum WORK_REQUEST_STATUS {
  REPORTED // Solicitud Reportada
  APPROVED // Solicitud Aprobada
  ATTENDED // Solicitud Atendida
  CANCELLED // Solicitud Cancelada
}

model WorkRequest {
  id             String                     @id @default(cuid())
  requestNumber  String                     @unique
  description    String
  isUrgent       Boolean                    @default(false)
  requestDate    DateTime                   @default(now())
  observations   String?
  customLocation String?
  status         WORK_REQUEST_STATUS        @default(REPORTED)

  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  approvalDate DateTime?
  approvalById String?
  approvalBy   User?                @relation("WorkRequestApprovalBy", fields: [approvalById], references: [id])
  userId       String
  user         User                 @relation(fields: [userId], references: [id])
  attachments  Attachment[]
  comments     WorkRequestComment[]
  workOrders   WorkOrder[]
  equipments   Equipment[]

  @@map("work_request")
}

model WorkRequestComment {
  id      String @id @default(cuid())
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId        String
  user          User        @relation(fields: [userId], references: [id])
  workRequestId String
  workRequest   WorkRequest @relation(fields: [workRequestId], references: [id], onDelete: Cascade)

  @@map("work_request_comment")
}

enum ACTIVITY_TYPE {
  CREATE
  UPDATE
  DELETE
  SUBMIT
  APPROVE
  REJECT
  CANCEL
  COMPLETE
  VIEW
  DOWNLOAD
  UPLOAD
  COMMENT
  ASSIGN
  UNASSIGN
  LOGIN
  LOGOUT
}

enum MODULES {
  EQUIPMENT // Equipos y Ubicacioens
  SAFETY_TALK // Charlas de seguridad
  WORK_ORDERS // Ordenes de Trabajo y Libros de obras
  WORK_PERMITS // Permisos de Trabajo
  DOCUMENTATION // Documentacion
  WORK_REQUESTS // Solicitudes de Trabajo
  COMPANY // Empresas
  USERS // Usuarios
  MAINTENANCE_PLANS // Planes de Mantenimiento y Tareas de los planes
  STARTUP_FOLDERS // Carpetas de Arranque
  VEHICLES // Vehiculos (acceso contratista, no OTC)
  CONTACT // Contacto y Soporte
  NONE // Sin módulo
}

model ActivityLog {
  id         String        @id @default(cuid())
  timestamp  DateTime      @default(now())
  module     MODULES
  action     ACTIVITY_TYPE
  entityId   String
  entityType String
  metadata   Json?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([module])
  @@index([entityType, entityId])
  @@index([timestamp])
  @@map("activity_log")
}
